<template>
  <div class="connection-type">
    <div class="connection-type two">
      <label>Устройство:</label>
      <select
        @change="onChange('type', parseInt($event.target.value))"
        v-model="localType"
      >
        <option :value="connectionTypes.comPort_RS232">RS-232</option>
        <option :value="connectionTypes.comPort_RS485">RS-485</option>
        <option :value="connectionTypes.comPort_RSEthernet">Ethernet</option>
      </select>
    </div>

    <div class="connection-type two">
      <label>Тайм-аут (c):</label>
      <number-box
        @update:modelValue="onChange('timeOut', $event)"
        v-model="localTimeOut"
        style="width: 60px"
        :max="1000"
      />
    </div>
  </div>
</template>

<script>
import NumberBox from '../../Inputs/NumberBox.vue'
import { matchType } from '../../../plugins/api'

export default {
  name: 'UsbDevice',
  props: {
    group: Object,
    error: Object,
  },
  components: { NumberBox },
  data() {
    return {
      localType: this.group.type,
      localComPort: this.group.comPort,
      localComSpeed: this.group.comSpeed,
      localNetworkAddress: this.group.networkAddress,
      localNetworkPort: this.group.networkPort,
      localNetworkProtocol: this.group.networkProtocol,
      localTimeOut: this.group.timeOut,
      connectionTypes: matchType(this.$store.state.env.connectionTypes),
      localError: {
        comPort: null,
        comSpeed: null,
        networkAddress: null,
        networkPort: null,
      },
    }
  },
  watch: {
    'group.type'(value) {
      this.localType = value
    },
    'group.comPort'(value) {
      this.localComPort = value
    },
    'group.comSpeed'(value) {
      this.localComSpeed = value
    },
    'group.networkAddress'(value) {
      this.localNetworkAddress = value
    },
    'group.networkPort'(value) {
      this.localNetworkPort = value
    },
    'group.networkProtocol'(value) {
      this.localNetworkProtocol = value
    },
    'group.timeOut'(value) {
      this.localTimeOut = value
    },
    error(value) {
      Object.keys(this.localError).forEach((r) => (this.localError[r] = null))
      if (value) {
        Object.entries(value).forEach(([k, v]) => (this.localError[k] = v))
      }
    },
  },
  methods: {
    onChange(prop, value) {
      this.$emit('changed', prop, value)

      if (prop === 'type') {
        this.$emit('changeConnectionType', value)
      }
    },
  },
}
</script>
